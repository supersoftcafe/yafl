
module Io

import System
import System::Interop


fun readChar(): Int32 => Int32(getchar())
fun writeChar(value: Int32): Int32 => Int32(putchar(Int(value)))

fun print(value: Int64): Int32 => value < 0i64 ? writeChar(45) + print(-value) : ((value < 10i64 ? 0 : print(value/10i64)) + writeChar(48 + Int32(value%10i64)))
fun print(value: Int32): Int32 => print(Int64(value))
fun print(value: Int16): Int32 => print(Int64(value))
fun print(value: Int8 ): Int32 => print(Int64(value))


# fun print(value: String, index: Int32): Int32 => index < value.size() ? putchar(Int32(value.at(index))) + print(value, index + 1) : 0
# fun print(value: String): Int32 => print(value, 0)

fun print(value: String): Int32 => Int32(write(Int(1), __raw_pointer__(value._data), Size(value.size())))

fun writeLine(value: String): Int32 => print(value) + writeChar(10)

fun readLine(): String => let c = readChar(); c == 10 ? "" : (charToString(c) + readLine())

