

# This is an array of two integers
val t = [6, 7]



val dataAsStrings = ["1", "2", "3", "4", "5", "6"]

val dataAsNumbers = dataAsStrings
        . map Int.parse
        . filter ( `!=` 3 )



fun dataAsNumbers
    return map(dataAsStrings, emptyList, (r,v) -> r.append(v), Int.parse)


fun filter<TIn, TResult>(values: Iterable<TIn>, r:TResult, accumulate(r:TResult,v:TIn):TResult, predicate(v:TIn):bool): TResult {
    return if values.IsEmpty
        r
    else if predicate(values.first)
        filter(values.next, accumulate(r, values.first), accumulate, predicate)
}

fun map<TIn, TOut, TResult>(values: Iterable<TIn>, r:TResult, accumulate(r:TResult,v:TOut):TResult, mapper(v:TIn):TOut): TResult {
    return if values.IsEmpty
        r
    else
        map(values.next, accumulate(r, mapper(values.first)), accumulate, mapper)
}


