Every function that is called indirectly anywhere must be emitted as CPS (Continuation Passing Style).

Every function that uses a CPS function must itself be CPS.

All IO functions use CPS.

Remaining functions are normal.

Compiler will try to reduce indirect calls as much as possible.


Dynamic function pointer is equivalent to C
struct Function {
    void (*func)(void* context, void (*continuation)(void* context, SPECIFIC_TYPE result), params);
    void* context; // Heap memory. If func is from a class object, this might be its heap object, otherwise will be part of a thunk.
}

CPS style in C is
void myFunc(void* continuationContext, void (*continuation)(void *context, SPECIFIC_TYPE result), params) { }

Control can be transferred to the continuation by tail call or normal call.
Most of the time it'll be tail call.

Where a function is CPS it will be broken down into multiple sub-functions and possibly
an allocation of a context (heap based stack frame equivalent).

A CPS is not required to allocate a context. It can easily be contextless.

A CPS continuation can be invoked on any thread.

