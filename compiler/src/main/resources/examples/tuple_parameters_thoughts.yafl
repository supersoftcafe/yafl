
# All functions take one parameter and return one result
# That one parameter or result could be the empty tuple
# The tuple can be accepted as the single named parameter, or unpacked as traditional parameters




# One parameter alone doesn't need brackets, it is an implicit tuple of one
fun Something name = name + 27

# Two parameters is a tuple and so needs to be specified as such, but each tuple entry
# can be referenced directly for convenience
fun Something (name, value) = name + value

# The parameter as tuple can be referenced directly, for instance if we need to pass the entire
# parameter set to another function
fun Something (name, value) = ProcessMore param

# Or maybe we need to pass the parameters with one extra parameter
fun Something (name, value) = ProcessMore param.concat "fred"

# Tuples of one is equivalent to the value itself.
# We aren't overloading the contept of brackets this way. It always
# means tuple, even if it's a tuple of one that happens to conveniently
# provide precedence in expressions.
fun Something (a, b, c) = (a + b) * c

# The result is also a tuple. Because parameters and results are both tuple, it's perfectly
# possible to return all the values required by some other function.
fun ProcessMore(a, b) = a + b
fun GetSomething = (1, 2)
fun Something = ProcessMore GetSomething

